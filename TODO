Parsing:
- proper scalar polimorphing
- proper handling of function return values
- scalar/array/void context
- stashes
- global variables/symbols (STDOUT!)
- local variables
- scoping
- lexing of quoted strings
- conditional constructs
- lexing of integers/floating point
- do/require/use/eval
- multiple dispatch operators
- array/list/hash assignment
  - optimize lists with common assignments
- undef
- garbage collection
- labels
- subroutine prototypes
- scope handling of conditional/while/continue
- handle errors
- encapsulate lexical lookup/closure
- better handling of sub calls
  - encapsulate enter/leave
- proper morphing on scalar assignment
- autovivification
- create common superclass for reference/scalar
- handling of parse errors with recovery
- strictures
- lexical pragmas/hints
- handle :: in identifiers, ${^foo} special variables, "'" in identifiers
- proper lexing of ${  id # comment\n } vs. ${ id # comment \n expr }
- proper check for overridable builtins (only if imported)
- builtins overridable using CORE::GLOBAL
- CORE::builtin to always call builtin
- special treatment for glob()
- simplify detection of <foo> vs. <foo >, avoid constructing a lexer
- packages
- package handling in our()
- parsing of nullary/unary vs. list operators
- => must also quote qw/qx/s/etc.
- quoting inside ->{}, also of {s}, etc.
- \Q\L\U\E in quoted strings/patterns
- regexp char classes and other metacharacters
- regexp backreferences, also in substitution
- regexp magic variables
- intuit_more, esp. inside patterns
- \xaf, \011,etc when lexing quoted strings

Refactoring:
- proper handling of bytecode
- replace all strings with integer constants/flags
- remove dependency from parser to implementation (::Values, scratchpad)
- assert unlexed tokens are relexed with the correct expectations
- assert lex_string/lex unlex buffers do not intermingle
- separate compile-time lexicals from run-time scratchpads
