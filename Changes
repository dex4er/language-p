Revision history for Perl extension Language::P.

0.01_04
	- Parsing:
	    - 'do' in its various forms.
	    - 'require expr' and 'require package', use/no.
	    - Make eval 'string' capture all lexicals in scope.
	    - Various fixes to the parsing of $#, $#foo and $#{foo} in
	      quoted strings.
	    - Octal and hexadecimal string escapes.
	    - our() declarations.
	    - Subroutine prototypes (parsing and context).
	    - Skip POD while parsing, stop at __DATA__/__END__.
	    - Implicit $_ for builtins, implicit @_/@ARGV for shift/pop.
	    - Lexically-scoped hints and warnings.
	    - Fix return context to always be 'caller'.
	    - Save file/line information in the parse tree.
	- Intermediate representation:
	    - Fix code generation for nested if-then-else constructs.
	    - Code generation for use/no and BEGIN blocks.
	    - Check arguments for \<thing> prototypes.
	    - Refactor representation: positional parameters are always opcodes,
	      fixed values are always named attributes.
	    - Moved lexical variable allocation and closure/eval handling
	      to the IR generator.
	    - Store the type of lexical variables in lexical access opcodes.
	    - Store file/line information.
	    - Add scope and unwinding information.
	- Toy runtime
	    - Execute BEGIN blocks as soon as they are parsed.
	    - Implemented do 'file', require, use and eval 'string'.
	    - Basic hash implementation.
	    - Basic autovivification implementation.
	    - Interpolated regular expressions.
	    - Autoincrement and autodecrement.
	    - Anonymous array/hash references.
	    - Basic object and method call implementation.
	    - DATA filehandle.
	    - Stack unwinding, catch exception with eval.

0.01_03  Sun Mar  1 17:52:48 CET 2009
	- Parsing:
	    - Pre/post increment/decrement (++ and --) operators.
	    - Bitwise negation.
	    - Parsing of heredocs in substitutions.
	- Intermediate representation:
	    - Add an intermediate representation and use it as a base
	      for the Toy and Parrot code generators.
	    - Use the same instruction set for both stack-based IR and
	      SSA/register-based IR.
	    - Use basic blocks for the IR and add some opcode metadata
	      in inc/Opcodes.pm.
	- Toy runtime:
	    - Rewrite code generation to use the new IR representation.
	- Parrot runtime:
	    - Add a basic Parrot code generator/runtime.

0.01_02  Sat Nov 22 22:23:35 CET 2008
	- Parsing:
	    - Anonymous subroutines and closed-over lexical variables.
	    - Improved parsing of dereferences using '->'.
	    - Labels, goto and loop control statements.
	    - local().
	    - continue blocks.
	    - Add file and line information to tokens and use it to
	      report parse errors.
	- Toy runtime:
	    - local() for plain scalars.
	    - Anonymous subroutines and closures.
	    - Implement all loops (for, foreach, while, until, bare blocks).
	    - Loop control statements (only when not requiring stack unwinding).
	- Move to Git on GitHub.

0.01_01  Tue Sep 16 18:17:30 CEST 2008
	- First release.

